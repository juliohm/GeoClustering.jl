# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    SLIC(k, m; tol=1e-4, maxiter=10)

A method for clustering geospatial data into approximately `k`
clusters using Simple Linear Iterative Clustering (SLIC).
The method produces clusters of samples that are spatially
connected based on a distance `d‚Çõ` and that, at the same
time, are similar in terms of `vars` with distance `d·µ•`.
The tradeoff is controlled with a hyperparameter parameter
`m` in an additive model `d‚Çú = ‚àö(d·µ•¬≤ + m¬≤(d‚Çõ/s)¬≤)`.

## Parameters

* `k`       - Approximate number of clusters
* `m`       - Hyperparameter of SLIC model
* `tol`     - Tolerance of k-means algorithm (default to `1e-4`)
* `maxiter` - Maximum number of iterations (default to `10`)
* `weights` - Dictionary with weights for each attribute (default to `nothing`)

## References

* Achanta et al. 2011. [SLIC superpixels compared to state-of-the-art
  superpixel methods](https://ieeexplore.ieee.org/document/6205760)
"""
struct SLIC{W} <: ClusteringMethod
  k::Int
  m::Float64
  tol::Float64
  maxiter::Int
  weights::W
end

function SLIC(k::Int, m::Real; tol=1e-4, maxiter=10, weights=nothing)
  @assert tol > 0 "invalid tolerance"
  @assert maxiter > 0 "invalid number of iterations"
  SLIC{typeof(weights)}(k, m, tol, maxiter, weights)
end

function partition(data, method::SLIC)
  # normalize atributes
  ùíØ = TableDistances.normalize(values(data))
  Œ© = georef(first(ùíØ), domain(data))

  # weights for each attribute
  weights = method.weights

  # SLIC hyperparameter
  m = method.m

  # initial spacing of clusters
  s = slic_spacing(Œ©, method)

  # initialize cluster centers
  c = slic_initialization(Œ©, s)

  # ball neighborhood search
  searcher = BallSearch(Œ©, NormBall(maximum(s)))

  # pre-allocate memory for label and distance
  l = fill(0, nelements(Œ©))
  d = fill(Inf, nelements(Œ©))

  # performance parameters
  tol     = method.tol
  maxiter = method.maxiter

  # k-means algorithm
  err, iter = Inf, 0
  while err > tol && iter < maxiter
    o = copy(c)

    slic_assignment!(Œ©, searcher, weights, m, s, c, l, d)
    slic_update!(Œ©, c, l)

    err = norm(c - o) / norm(o)
    iter += 1
  end

  orphans = findall(iszero, l)
  if length(orphans) > 0
    assigned = findall(!iszero, l)
    Œ©‚ÇÄ = view(domain(Œ©), assigned)
    csearcher = KNearestSearch(Œ©‚ÇÄ, 1)

    for orphan in orphans
      p = centroid(Œ©, orphan)
      i = search(p, csearcher)[1]
      l[orphan] = l[assigned[i]]
    end
  end

  subsets = [findall(isequal(k), l) for k in 1:length(c)]

  Partition(data, subsets)
end

slic_spacing(data, method) = slic_srecursion(method.k, sides(boundingbox(data)))

# Given the desired number of clusters and the sides of the bounding box
# of the geometry, returns a vector of spacings for each dimension of the
# bounding box.
function slic_srecursion(k, l)
  d = length(l)
  
  # base case
  d == 1 && return [l[1] / k]
  
  # compute the spacing for the j-th dimension
  j  = argmax(l)
  k‚±º = ceil(Int, k^(1/d))
  s‚±º = l[j]/k‚±º
  
  # update the new k and l
  k‚Çô = ceil(Int, k/k‚±º)
  l‚Çô = [l[begin:j-1]; l[j+1:end]]

  # then recursively computes the spacing for the remaining dimensions
  s  = slic_srecursion(k‚Çô, l‚Çô)
  
  [s[begin:j-1]; [s‚±º]; s[j:end]]
end

function slic_initialization(data, s)
  # efficient neighbor search
  searcher = KNearestSearch(data, 1)

  # bounding box properties
  bbox = boundingbox(data)
  lo, up = coordinates.(extrema(bbox))

  # cluster centers
  clusters = Vector{Int}()
  neighbor = Vector{Int}(undef, 1)
  ranges = [(l+s·µ¢/2):s·µ¢:u for (l, s·µ¢, u) in zip(lo, s, up)]
  for x in Iterators.product(ranges...)
    search!(neighbor, Point(x), searcher)
    push!(clusters, neighbor[1])
  end

  unique(clusters)
end

function slic_assignment!(data, searcher, weights, m, s, c, l, d)
  for (k, c‚Çñ) in enumerate(c)
    s‚Çò = maximum(s)
    p‚Çñ = centroid(data, c‚Çñ)
    inds = search(p‚Çñ, searcher)

    # distance between points
    X  = (coordinates(centroid(data, ind)) for ind in inds)
    x‚Çñ = [coordinates(p‚Çñ)]
    d‚Çõ = pairwise(Euclidean(), X, x‚Çñ)

    # distance between variables
    ùíÆ·µ¢ = view(data, inds)
    ùíÆ‚Çñ = view(data, [c‚Çñ])
    V  = values(ùíÆ·µ¢)
    v‚Çñ = values(ùíÆ‚Çñ)
    td = TableDistance(normalize=false, weights=weights)
    d·µ• = pairwise(td, V, v‚Çñ)

    # total distance
    d‚Çú = @. ‚àö(d·µ•^2 + m^2 * (d‚Çõ/s‚Çò)^2)

    @inbounds for (i, ind) in enumerate(inds)
      if d‚Çú[i] < d[ind]
        d[ind] = d‚Çú[i]
        l[ind] = k
      end
    end
  end
end

function slic_update!(data, c, l)
  for k in 1:length(c)
    inds = findall(isequal(k), l)
    X  = (coordinates(centroid(data, ind)) for ind in inds)
    Œº  = [mean(X)]
    d‚Çõ = pairwise(Euclidean(), X, Œº)
    @inbounds c[k] = inds[argmin(vec(d‚Çõ))]
  end
end
